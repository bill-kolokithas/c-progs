#include <stdbool.h>
#include "binary-search-tree.h"

#define ARRAY_SIZE(x) (int) (sizeof(x) / sizeof(x[0]))
#define RED true
#define BLACK false

struct node {
	int key, size;
	char *value;
	struct node *left, *right;
	bool color;
};

RBnode *root = NULL;
char *words[] = { "lol", "re", "malaka", "rofl", "troll", "noob", "shit" };
int indexes[] = { 5, 7, 2, 3, 1, 8, 6 };
int i;

void setup(void) {

	for (i = 0; i < ARRAY_SIZE(words); i++)
		rbt_put(&root, indexes[i], words[i]);
}

void destroy(void) {

	rbt_destroy(root);
}

bool rbt_size_consistent(RBnode *root) {

	if (root == NULL)
		return true;
	if (root->size != rbt_size(root->left) + rbt_size(root->right) + 1)
		return false;

	return rbt_size_consistent(root->left) && rbt_size_consistent(root->right);
}

static bool rbt_isRed(RBnode *node) {

	if (node == NULL)
		return false;

	return node->color == RED;
}

bool rbt_is23(RBnode *root, RBnode *node) {

	if (node == NULL)
		return true;

	if (rbt_isRed(node->right))
		return false;

	if (node != root && rbt_isRed(node) && rbt_isRed(node->left))
		return false;

	return rbt_is23(root, node->left) && rbt_is23(root, node->right);
}

bool _rbt_isBalanced(RBnode *root, int black);
bool rbt_isBalanced(RBnode *root) {

	RBnode *node = root;
	int black = 0;

	while (node != NULL) {
		if (!rbt_isRed(node))
			black++;
		node = node->left;
	}
	return _rbt_isBalanced(root, black);
}

bool _rbt_isBalanced(RBnode *node, int black) {

	if (node == NULL)
		return black == 0;

	if (!rbt_isRed(node))
		black--;

	return _rbt_isBalanced(node->left, black) && _rbt_isBalanced(node->right, black);
}

#test size

	ck_assert_int_eq(rbt_size(root), 7);

#test size_range

	ck_assert_int_eq(rbt_size_range(root, 4, 7), 3);
	ck_assert_int_eq(rbt_size_range(root, 6, 9), 3);

#test min

	ck_assert_int_eq(rbt_min(root), 1);

#test max_rbt

	ck_assert_int_eq(rbt_max(root), 8);

#test empty

	ck_assert_int_eq(rbt_isEmpty(root), 0);

#test contains

	ck_assert_int_eq(rbt_contains(root, 0), 0);
	ck_assert_int_ne(rbt_contains(root, 2), 0);

#test floor_rbt

	ck_assert_int_eq(rbt_floor(root, 4), 3);
	ck_assert_int_eq(rbt_floor(root, 11), 8);
	ck_assert_int_eq(rbt_floor(root, 0), -1);

#test ceiling

	ck_assert_int_eq(rbt_ceiling(root, 4), 5);
	ck_assert_int_eq(rbt_ceiling(root, 0), 1);
	ck_assert_int_eq(rbt_ceiling(root, 11), -1);

#test rank

	ck_assert_int_eq(rbt_rank(root, 4), 3);
	ck_assert_int_eq(rbt_rank(root, 8), 6);

#test select_rbt

	ck_assert_int_eq(rbt_select(root, 4), 6);
	ck_assert_int_eq(rbt_select(root, 6), 8);

#test height

	ck_assert_int_eq(rbt_height(root), 2);

#test deletemin

	ck_assert_ptr_ne(rbt_get(root, 1), NULL);
	rbt_delete_min(&root);
	ck_assert_ptr_eq(rbt_get(root, 1), NULL);

#test deletemax

	ck_assert_ptr_ne(rbt_get(root, 8), NULL);
	rbt_delete_max(&root);
	ck_assert_ptr_eq(rbt_get(root, 8), NULL);

#test delete_key

	ck_assert_ptr_ne(rbt_get(root, 5), NULL);
	rbt_delete(&root, 5);
	ck_assert_ptr_eq(rbt_get(root, 5), NULL);

#test print_inorder

	for (i = 0; i < rbt_size(root); i++)
		ck_assert_str_eq(rbt_get(root, indexes[i]), words[i]);

#test size_consistent

	ck_assert(rbt_size_consistent(root));

#test is23

	ck_assert(rbt_is23(root, root));

#test isBalanced

	ck_assert(rbt_isBalanced(root));

#main-pre
	tcase_add_unchecked_fixture(tc1_1, setup, destroy);
